#include "metaobject.hpp"

void MetaObject::CallCtor(){
    if(_methods.count("ctor")==1)Call("ctor");
}

MetaObject MetaObject::Copy(){
    MetaObject mo(*this);
    MetaState *newstate=new MetaState(*this->_state);
    mo._state.reset(newstate);
    return mo;
}

void MetaObject::Call(const string &mname){
    if(_methods.count(mname)<1) throw std::exception();
    PolyWrapper<IFnWrap> fn=_methods[mname];
    if(!fn().TypeCheck(typeid(NO_RETURN), typeid(NO_PARAMS))){
        throw std::exception();
    }
    MetaInfo ifo(*_state,MetaContext(mname, *this, MkConvert(many())));
    if(fn().IsStatic()) ifo.State=MetaState();
    fn().Call(ifo, NullValue);
}

any MetaObject::Call(const string &mname, many args){
    if(_methods.count(mname)<1) throw std::exception();
    PolyWrapper<IFnWrap> fn=_methods[mname];
    MetaState &state=(fn().IsStatic())?MetaContext():*_state;
    MetaInfo ifo(state, MetaContext(mname, *this, MkConvert(arg)));
    return fn().Call(ifo, args);
}
